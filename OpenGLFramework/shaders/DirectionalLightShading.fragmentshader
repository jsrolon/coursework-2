#version 120

// Interpolated values from the vertex shaders
in vec2 UV;
in vec3 Normal_worldspace;
in vec3 Light_worldspace;

// Values that stay constant for the whole mesh.
uniform sampler2D myTextureSampler;

void main(){

	// Light emission properties
	// You probably want to put them as uniforms
	vec3 LightColor = vec3(1,1,1);

	// Material properties
	vec3 MaterialDiffuseColor = texture2D( myTextureSampler, UV ).rgb;

	// Normal of the computed fragment
	vec3 n = normalize( Normal_worldspace );
	// Direction of the light (constant as it is a directional light)
	vec3 l = normalize( Light_worldspace );
	// Cosine of the angle between the normal and the light direction, 
	// clamped above 0
	//  - light is at the vertical of the triangle -> 1
	//  - light is perpendicular to the triangle -> 0
	//  - light is behind the triangle -> 0
	float cosTheta = clamp( dot( n,l ), 0,1 );
	
	gl_FragColor.rgb = 
		// Diffuse : "color" of the object
		MaterialDiffuseColor * LightColor * cosTheta ;

}
