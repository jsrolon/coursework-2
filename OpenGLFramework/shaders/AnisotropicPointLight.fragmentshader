#version 120

// Interpolated values from the vertex shaders
varying vec2 UV;
varying vec3 Position_worldspace;
varying vec3 Normal_cameraspace;
varying vec3 Tangent_cameraspace;
varying vec3 Bitangent_cameraspace;
varying vec3 EyeDirection_cameraspace;
varying vec3 LightDirection_cameraspace;

// Values that stay constant for the whole mesh.
uniform sampler2D myTextureSampler;
uniform mat4 MV;
uniform vec3 LightPosition_worldspace;

void main(){

	// Light emission properties
	// You probably want to put them as uniforms
	vec3 LightColor = vec3(1,1,1);
	float LightPower = 30.0f;
	float kSpecular = 10.0f;
	
	// Material properties
	vec3 MaterialDiffuseColor = texture2D( myTextureSampler, UV ).rgb;
	vec3 MaterialAmbientColor = vec3(0.1,0.1,0.1) * MaterialDiffuseColor;
	vec3 MaterialSpecularColor = vec3(0.4,0.4,0.4);

	// Distance to the light
	float distance = length( LightPosition_worldspace - Position_worldspace );
	// Normal of the computed fragment, in camera space
	vec3 n = normalize( Normal_cameraspace );
	// Direction of the light (from the fragment to the light)
	vec3 l = normalize( LightDirection_cameraspace );
	// Cosine of the angle between the normal and the light direction, 
	// clamped above 0
	//  - light is at the vertical of the triangle -> 1
	//  - light is perpendicular to the triangle -> 0
	//  - light is behind the triangle -> 0
	float cosTheta = clamp( dot( n,l ), 0,1 );
	
	// Eye vector (towards the camera)
	vec3 E = normalize(EyeDirection_cameraspace);
	// Direction in which the triangle reflects the light
	vec3 R = reflect(-l,n);
	// halfway vector (for anisotropic reflection)
	vec3 H = normalize(E + l);
	// Cosine of the angle between the Eye vector and the Reflected light direction,
	// clamped to 0
	//  - Looking into the reflection -> 1
	//  - Looking elsewhere -> < 1
	float cosAlpha = clamp( dot( E,R ), 0,1 );

	/* Anisotropic calculations */
	// T and B vectors
	vec3 T = normalize(Tangent_cameraspace);
	vec3 B = normalize(Bitangent_cameraspace);

	float dotHTAlphaX = dot(H, T)/kSpecular;
	float dotHBAlphaY = dot(H, B)/kSpecular;

	// 0.5 models brightness along tangent being half of that along bitangent
	float ward = exp(-2.0 * (dotHTAlphaX * dotHTAlphaX * 0.5 + dotHBAlphaY * dotHBAlphaY) / (1.0 + dot(H, n)));
	
	gl_FragColor.rgb = 
		// Ambient : simulates indirect lighting
		MaterialAmbientColor +
		// Diffuse : "color" of the object
		MaterialDiffuseColor * LightColor * LightPower * cosTheta / (distance*distance) + 
		// Specular: metallic shine
		MaterialSpecularColor * LightColor * LightPower * cosAlpha * ward / (distance*distance);

}
